#!/usr/bin/python2
from meocloud_gui.application import Application
import gettext
import locale
import os
import os.path
import filecmp


def init_localization():
    '''prepare l10n'''
    locale.setlocale(locale.LC_ALL, '')
    loc = locale.getlocale()
    filename = "mo/%s.mo" % locale.getlocale()[0][0:2]
    path = os.path.join(os.path.dirname(os.path.realpath(__file__)), filename)

    try:
        trans = gettext.GNUTranslations(open(path, "rb"))
    except IOError:
        trans = gettext.NullTranslations()

    trans.install()


if __name__ == "__main__":
    trans_src = os.path.join(os.path.dirname(os.path.realpath(__file__)), "mo")
    trans_dst = os.path.join(os.path.expanduser('~'),
                             '.local/share/nautilus-python/extensions/'
                             'meocloud_mo')

    nautilus_py = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                               "meocloud_nautilus/meocloud-nautilus.py")
    nautilus_dir = os.path.join(os.path.expanduser('~'),
                                '.local/share/nautilus-python/extensions')
    nautilus_dst = os.path.join(nautilus_dir, "meocloud-nautilus.py")

    nemo_py = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                           "meocloud_nemo/meocloud-nemo.py")
    nemo_dir = os.path.join(os.path.expanduser('~'),
                            '.local/share/nemo-python/extensions')
    nemo_dst = os.path.join(nemo_dir, "meocloud-nemo.py")

    if not os.path.exists(nautilus_dir):
        os.makedirs(nautilus_dir)

    if not os.path.exists(nemo_dir):
        os.makedirs(nemo_dir)

    if os.path.exists(trans_src) and not os.path.exists(trans_dst):
        os.symlink(trans_src, trans_dst)

    if os.path.isfile(nautilus_dst):
        if not filecmp.cmp(nautilus_py, nautilus_dst):
            os.remove(nautilus_dst)
            os.symlink(nautilus_py, nautilus_dst)
    else:
        os.symlink(nautilus_py, nautilus_dst)

    if os.path.isfile(nemo_dst):
        if not filecmp.cmp(nemo_py, nemo_dst):
            os.remove(nemo_dst)
            os.symlink(nemo_py, nemo_dst)
    else:
        os.symlink(nemo_py, nemo_dst)

    init_localization()
    app = Application(os.path.dirname(os.path.realpath(__file__)))
    app.run(None)
